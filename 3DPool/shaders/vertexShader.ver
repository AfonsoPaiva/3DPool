#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;


uniform mat4 globalModel;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform bool useSkybox;  

out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoord;
out vec3 SkyboxTexCoord;

void main() {
    mat4 finalModel = globalModel * model;
    
    // Saídas padrão para outros objetos
    FragPos = vec3(finalModel * vec4(aPos, 1.0));
    Normal = mat3(transpose(inverse(finalModel))) * aNormal;
    TexCoord = aTexCoords;
    SkyboxTexCoord = aPos;

    if (useSkybox) {
        // Cálculo especial para skybox
        mat4 viewRotOnly = mat4(mat3(view));
        vec4 pos = projection * viewRotOnly * vec4(aPos, 1.0);
        gl_Position = pos.xyww;
    } else {
        // Cálculo normal para outros objetos
        gl_Position = projection * view * finalModel * vec4(aPos, 1.0);
    }
}